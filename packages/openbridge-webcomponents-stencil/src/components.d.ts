/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ObcIcon {
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The icon size in pixels
         */
        "sizePx": number;
    }
    interface ObcTooltip {
        "label": string;
        /**
          * Open the tooltip
          * @type {boolean} The tooltip can also be opened by using CSS custom properties: --obc-tooltip-open: 1
         */
        "open": boolean;
        /**
          * Position of the tooltip arrow
          * @type {('above' | 'below' | 'left' | 'right')}
         */
        "position": 'above' | 'below' | 'left' | 'right';
        "text": string;
    }
}
export interface MyComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyComponentElement;
}
declare global {
    interface HTMLMyComponentElementEventMap {
        "myEvent": {id: number};
    }
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyComponentElementEventMap>(type: K, listener: (this: HTMLMyComponentElement, ev: MyComponentCustomEvent<HTMLMyComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyComponentElementEventMap>(type: K, listener: (this: HTMLMyComponentElement, ev: MyComponentCustomEvent<HTMLMyComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLObcIconElement extends Components.ObcIcon, HTMLStencilElement {
    }
    var HTMLObcIconElement: {
        prototype: HTMLObcIconElement;
        new (): HTMLObcIconElement;
    };
    interface HTMLObcTooltipElement extends Components.ObcTooltip, HTMLStencilElement {
    }
    var HTMLObcTooltipElement: {
        prototype: HTMLObcTooltipElement;
        new (): HTMLObcTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "obc-icon": HTMLObcIconElement;
        "obc-tooltip": HTMLObcTooltipElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
        /**
          * The event when clicked
         */
        "onMyEvent"?: (event: MyComponentCustomEvent<{id: number}>) => void;
    }
    interface ObcIcon {
        /**
          * The icon name
         */
        "icon"?: string;
        /**
          * The icon size in pixels
         */
        "sizePx"?: number;
    }
    interface ObcTooltip {
        "label"?: string;
        /**
          * Open the tooltip
          * @type {boolean} The tooltip can also be opened by using CSS custom properties: --obc-tooltip-open: 1
         */
        "open"?: boolean;
        /**
          * Position of the tooltip arrow
          * @type {('above' | 'below' | 'left' | 'right')}
         */
        "position"?: 'above' | 'below' | 'left' | 'right';
        "text"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "obc-icon": ObcIcon;
        "obc-tooltip": ObcTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "obc-icon": LocalJSX.ObcIcon & JSXBase.HTMLAttributes<HTMLObcIconElement>;
            "obc-tooltip": LocalJSX.ObcTooltip & JSXBase.HTMLAttributes<HTMLObcTooltipElement>;
        }
    }
}
